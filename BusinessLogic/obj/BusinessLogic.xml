<?xml version='1.0'?>
<!--Generated by xmldoc v10.2.3i on 29 AUG 2014 14:26:13-->
<doc>
  <assembly>
    <name>DataUtils</name>
  </assembly>
  <members>
    <member name="T:BusinessLogic.DataUtils">
       <summary>
       Various data conversion utility methods
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.DateFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D6 (YYMMDD) or D8 (YYYYMMDD) date to the date portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D8FromDate(System.DateTime)">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D8 (YYYYMMDD) date
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D6FromDate(System.DateTime)">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D6 (YYMMDD) date
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.NullableDateFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D6 (YYMMDD) or D8 (YYYYMMDD) date to the date portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D8FromNullableDate(@System.Nullable{DateTime})">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D8 (YYYYMMDD) date
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D6FromNullableDate(@System.Nullable{DateTime})">
       <summary>
       Convert the date portion of a .NET DateTime to a Synergy D6 (YYMMDD) date
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.TimeFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D4 (HHMM) or D6 (HHMMSS) time to the time portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D6FromTime(System.DateTime)">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D6 (HHMMSS) time
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D4FromTime(System.DateTime)">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D4 (HHMM) time
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.NullableTimeFromDecimal(Synergex.SynergyDE.d)">
       <summary>
       Convert a Synergy D4 (HHMM) or D6 (HHMMSS) time to the time portion of a .NET DateTime
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D6FromNullableTime(@System.Nullable{DateTime})">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D6 (HHMMSS) time
       </summary>
    </member>
    <member name="M:BusinessLogic.DataUtils.D4FromNullableTime(@System.Nullable{DateTime})">
       <summary>
       Convert the time portion of a .NET DateTime to a Synergy D4 (HHMM) time
       </summary>
    </member>
    <member name="T:BusinessLogic.Services">
       <summary>
       This class exposes Synergy methods to the client application. Notice that
       it is a PARTIAL class, so additional code generated methods can be added
       to the class (for example via the ServicesCRUD template), and other
       hand-crafted methods could be added in seperate source files.
       </summary>
    </member>
    <member name="M:BusinessLogic.Part.#ctor">
       <summary>
       Construct an empty Part object
       </summary>
    </member>
    <member name="M:BusinessLogic.Part.#ctor(BusinessLogic.strPart)">
       <summary>
       Construct a Part object containing the data from a PART record
       </summary>
       <param name="aPart">Passed Part record (strPart)</param>
    </member>
    <member name="P:BusinessLogic.Part.Record">
       <summary>
       Expose the full record (so it can be saved to a file, etc.)
       Only visible within the Synergy .NET assembly because other languages don&apos;t understand Synergy types
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Id">
       <summary>
       part ID (ID, A20)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Groupid">
       <summary>
       Group ID (GROUPID, A20)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Supplierid">
       <summary>
       supplier id (SUPPLIERID, A20)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Description">
       <summary>
       Description (DESCRIPTION, A50)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.TechnicalInfo">
       <summary>
       Technical info (TECHNICAL_INFO, A500)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Quantity">
       <summary>
       quantity in stock (QUANTITY, I4)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.CostPrice">
       <summary>
       cost price (COST_PRICE, D10.2)
       </summary>
    </member>
    <member name="P:BusinessLogic.Part.Spare">
       <summary>
       (SPARE, A76)
       </summary>
    </member>
    <member name="T:BusinessLogic.Services">
       <summary>
       This class exposes hand-crafted methods to the client application.
       Notice that this is a PARTIAL class, so the methods are added to
       the main Services class defined in Services.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.Login(System.String,System.String,System.String)">
       <summary>
      
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.GetProductGroupParts(System.String,System.Collections.Generic.List{Part})">
       <summary>
       Get all Part records for a product group.
       </summary>
       <param name="aParts">Returned collection of Part objects (@List&lt;Part&gt;)</param>
       <returns></returns>
    </member>
    <member name="T:BusinessLogic.Services">
       <summary>
       This class exposes the CRUD methods for Part
       to the client application. Notice that this is a PARTIAL class, so the
       methods are added to the main Services class defined in Services.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.CreatePart(BusinessLogic.Part)">
       <summary>
       Create a Part record
       </summary>
       <param name="aPart">Passed Part object (@Part)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadAllParts(System.Collections.Generic.List{Part})">
       <summary>
       Real all Part records
       </summary>
       <param name="aParts">Returned collection of Part objects (@List&lt;Part&gt;)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadPart(System.String,BusinessLogic.Part,System.String)">
       <summary>
       Read a Part record by primary key (ID: primary part id)
       </summary>
       <param name="aId">Passed part ID (String)</param>
       <param name="aPart">Returned Part object (@Part)</param>
       <param name="aGrfa">Returned GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.UpdatePart(BusinessLogic.Part,System.String)">
       <summary>
       Update a Part record
       </summary>
       <param name="aPart">Passed/returned Part object (@Part)</param>
       <param name="aGrfa">Passed/returned GRFA</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.DeletePart(System.String)">
       <summary>
       Delete a Part record
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.PartExists(System.String)">
       <summary>
       Determine if a Part record exists
       </summary>
       <param name="aId">Passed part ID (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.ProductGroup.#ctor">
       <summary>
       Construct an empty ProductGroup object
       </summary>
    </member>
    <member name="M:BusinessLogic.ProductGroup.#ctor(BusinessLogic.strProductGroup)">
       <summary>
       Construct a ProductGroup object containing the data from a PRODUCT_GROUP record
       </summary>
       <param name="aProductGroup">Passed ProductGroup record (strProductGroup)</param>
    </member>
    <member name="P:BusinessLogic.ProductGroup.Record">
       <summary>
       Expose the full record (so it can be saved to a file, etc.)
       Only visible within the Synergy .NET assembly because other languages don&apos;t understand Synergy types
       </summary>
    </member>
    <member name="P:BusinessLogic.ProductGroup.GroupId">
       <summary>
       group id (GROUP_ID, A20)
       </summary>
    </member>
    <member name="P:BusinessLogic.ProductGroup.Description">
       <summary>
       description (DESCRIPTION, A100)
       </summary>
    </member>
    <member name="T:BusinessLogic.Services">
       <summary>
       This class exposes the CRUD methods for Supplier
       to the client application. Notice that this is a PARTIAL class, so the
       methods are added to the main Services class defined in Services.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.CreateSupplier(BusinessLogic.Supplier)">
       <summary>
       Create a Supplier record
       </summary>
       <param name="aSupplier">Passed Supplier object (@Supplier)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadAllSuppliers(System.Collections.Generic.List{Supplier})">
       <summary>
       Real all Supplier records
       </summary>
       <param name="aSuppliers">Returned collection of Supplier objects (@List&lt;Supplier&gt;)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadSupplier(System.String,BusinessLogic.Supplier,System.String)">
       <summary>
       Read a Supplier record by primary key (SUPPLIER_ID: primary access key)
       </summary>
       <param name="aSupplierId">Passed supplier id (String)</param>
       <param name="aSupplier">Returned Supplier object (@Supplier)</param>
       <param name="aGrfa">Returned GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.UpdateSupplier(BusinessLogic.Supplier,System.String)">
       <summary>
       Update a Supplier record
       </summary>
       <param name="aSupplier">Passed/returned Supplier object (@Supplier)</param>
       <param name="aGrfa">Passed/returned GRFA</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.DeleteSupplier(System.String)">
       <summary>
       Delete a Supplier record
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.SupplierExists(System.String)">
       <summary>
       Determine if a Supplier record exists
       </summary>
       <param name="aSupplierId">Passed supplier id (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Supplier.#ctor">
       <summary>
       Construct an empty Supplier object
       </summary>
    </member>
    <member name="M:BusinessLogic.Supplier.#ctor(BusinessLogic.strSupplier)">
       <summary>
       Construct a Supplier object containing the data from a SUPPLIER record
       </summary>
       <param name="aSupplier">Passed Supplier record (strSupplier)</param>
    </member>
    <member name="P:BusinessLogic.Supplier.Record">
       <summary>
       Expose the full record (so it can be saved to a file, etc.)
       Only visible within the Synergy .NET assembly because other languages don&apos;t understand Synergy types
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.SupplierId">
       <summary>
       supplier id (SUPPLIER_ID, A20)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.Name">
       <summary>
       supplier name (NAME, A50)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.Address1">
       <summary>
       addrss line 1 (ADDRESS_1, A50)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.Address2">
       <summary>
       address line 2 (ADDRESS_2, A50)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.Address3">
       <summary>
       address line 3 (ADDRESS_3, A50)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.City">
       <summary>
       city (CITY, A30)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.PostalCode">
       <summary>
       post code (POSTAL_CODE, A10)
       </summary>
    </member>
    <member name="P:BusinessLogic.Supplier.WebAddress">
       <summary>
       web address (WEB_ADDRESS, A78)
       </summary>
    </member>
    <member name="T:BusinessLogic.Services">
       <summary>
       This class exposes the CRUD methods for ProductGroup
       to the client application. Notice that this is a PARTIAL class, so the
       methods are added to the main Services class defined in Services.dbl.
       </summary>
    </member>
    <member name="M:BusinessLogic.Services.CreateProductGroup(BusinessLogic.ProductGroup)">
       <summary>
       Create a ProductGroup record
       </summary>
       <param name="aProductGroup">Passed ProductGroup object (@ProductGroup)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadAllProductGroups(System.Collections.Generic.List{ProductGroup})">
       <summary>
       Real all ProductGroup records
       </summary>
       <param name="aProductGroups">Returned collection of ProductGroup objects (@List&lt;ProductGroup&gt;)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ReadProductGroup(System.String,BusinessLogic.ProductGroup,System.String)">
       <summary>
       Read a ProductGroup record by primary key (GROUP_ID: primary access key)
       </summary>
       <param name="aGroupId">Passed group id (String)</param>
       <param name="aProductGroup">Returned ProductGroup object (@ProductGroup)</param>
       <param name="aGrfa">Returned GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.UpdateProductGroup(BusinessLogic.ProductGroup,System.String)">
       <summary>
       Update a ProductGroup record
       </summary>
       <param name="aProductGroup">Passed/returned ProductGroup object (@ProductGroup)</param>
       <param name="aGrfa">Passed/returned GRFA</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.DeleteProductGroup(System.String)">
       <summary>
       Delete a ProductGroup record
       </summary>
       <param name="aGrfa">Passed GRFA (string)</param>
       <returns></returns>
    </member>
    <member name="M:BusinessLogic.Services.ProductGroupExists(System.String)">
       <summary>
       Determine if a ProductGroup record exists
       </summary>
       <param name="aGroupId">Passed group id (string)</param>
       <returns></returns>
    </member>
  </members>
</doc>
